/*
 * securityapi
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagContentThreatDetectionApi {
    SwagClient client;

    public SwagContentThreatDetectionApi(SwagClient client) {
        this.client = client;
    }

    public SwagContentThreatDetectionApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Automatically detect threats in an input string
     * Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
     * @param value User-facing text input. (required)
     * @return SwagStringAutomaticThreatDetection
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagStringAutomaticThreatDetection contentThreatDetectionAutomaticThreatDetectionString(Map<String, Object> params) {
        client.assertNotNull(params.get('value'), 'value');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagStringAutomaticThreatDetection) client.invoke(
            'POST', '/security/threat-detection/content/automatic/detect/string',
            (String) params.get('value'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagStringAutomaticThreatDetection.class
        );
    }
    /**
     * Check text input for SQL Injection (SQLI) attacks
     * Detects SQL Injection (SQLI) attacks from text input.
     * @param value User-facing text input. (required)
     * @return SwagStringSqlInjectionDetectionResul
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagStringSqlInjectionDetectionResul contentThreatDetectionCheckSqlInjectionString(Map<String, Object> params) {
        client.assertNotNull(params.get('value'), 'value');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagStringSqlInjectionDetectionResul) client.invoke(
            'POST', '/security/threat-detection/content/sql-injection/detect/string',
            (String) params.get('value'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagStringSqlInjectionDetectionResul.class
        );
    }
    /**
     * Protect text input from XML External Entity (XXE) attacks
     * Detects XXE (XML External Entity) attacks from XML text input.
     * @param value User-facing text input. (required)
     * @return SwagStringXxeDetectionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagStringXxeDetectionResult contentThreatDetectionCheckXxe(Map<String, Object> params) {
        client.assertNotNull(params.get('value'), 'value');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagStringXxeDetectionResult) client.invoke(
            'POST', '/security/threat-detection/content/xxe/detect/xml/string',
            (String) params.get('value'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagStringXxeDetectionResult.class
        );
    }
    /**
     * Detect Insecure Deserialization JSON (JID) attacks in a string
     * Detects Insecure Deserialization JSON (JID) attacks from text input.
     * @param value User-facing text input. (required)
     * @return SwagStringInsecureDeserializationJso
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagStringInsecureDeserializationJso contentThreatDetectionDetectInsecureDeserializationJsonString(Map<String, Object> params) {
        client.assertNotNull(params.get('value'), 'value');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagStringInsecureDeserializationJso) client.invoke(
            'POST', '/security/threat-detection/content/insecure-deserialization/json/detect/string',
            (String) params.get('value'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagStringInsecureDeserializationJso.class
        );
    }
    /**
     * Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
     * Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
     * @param value User-facing text input. (required)
     * @return SwagStringXssProtectionResult
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagStringXssProtectionResult contentThreatDetectionProtectXss(Map<String, Object> params) {
        client.assertNotNull(params.get('value'), 'value');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagStringXssProtectionResult) client.invoke(
            'POST', '/security/threat-detection/content/xss/detect/string',
            (String) params.get('value'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagStringXssProtectionResult.class
        );
    }
}
